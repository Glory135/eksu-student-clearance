/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    departments: Department;
    requirements: Requirement;
    documents: Document;
    media: Media;
    images: Image;
    'clearance-records': ClearanceRecord;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    departments: DepartmentsSelect<false> | DepartmentsSelect<true>;
    requirements: RequirementsSelect<false> | RequirementsSelect<true>;
    documents: DocumentsSelect<false> | DocumentsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    images: ImagesSelect<false> | ImagesSelect<true>;
    'clearance-records': ClearanceRecordsSelect<false> | ClearanceRecordsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  lastName: string;
  firstName: string;
  middleName: string;
  role: 'student' | 'officer' | 'student-affairs' | 'admin';
  department?: (string | null) | Department;
  matricNo?: string | null;
  phone?: string | null;
  status: 'active' | 'inactive' | 'suspended';
  profileImage?: (string | null) | Image;
  lastLogin?: string | null;
  clearanceStatus?: ('not-started' | 'in-progress' | 'completed' | 'on-hold') | null;
  /**
   * Whether the user has set their password
   */
  hasSetPassword: boolean;
  /**
   * When the password was first set
   */
  passwordSetAt?: string | null;
  /**
   * User who created this account
   */
  createdBy?: (string | null) | User;
  /**
   * Department that created this account (for officers)
   */
  createdByDepartment?: (string | null) | Department;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "departments".
 */
export interface Department {
  id: string;
  name: string;
  /**
   * Short code for the department (e.g., CS, MAT, PHY)
   */
  code: string;
  description?: string | null;
  /**
   * Primary clearance officer for this department
   */
  officer?: (string | null) | User;
  /**
   * Student affairs officer for this department
   */
  studentAffairsOfficer?: (string | null) | User;
  status: 'active' | 'inactive' | 'under-review';
  /**
   * Order in which this department should be cleared (1 = first)
   */
  clearanceOrder: number;
  requiredDocuments?: (string | Requirement)[] | null;
  /**
   * Number of students in this department
   */
  studentCount?: number | null;
  /**
   * Number of completed clearances
   */
  completedClearances?: number | null;
  /**
   * Number of pending clearances
   */
  pendingClearances?: number | null;
  /**
   * Whether this department can add their own officers
   */
  canAddOfficers: boolean;
  /**
   * Maximum number of officers this department can create (0 = unlimited)
   */
  officerCreationLimit?: number | null;
  /**
   * Officers created by this department
   */
  createdOfficers?: (string | User)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "requirements".
 */
export interface Requirement {
  id: string;
  name: string;
  /**
   * Unique code for this requirement (e.g., TRANSCRIPT, PAYMENT_RECEIPT)
   */
  code: string;
  /**
   * Detailed description of what this document should contain
   */
  description?: string | null;
  departments: (string | Department)[];
  documentType:
    | 'transcript'
    | 'payment-receipt'
    | 'library-clearance'
    | 'student-id'
    | 'medical-certificate'
    | 'character-reference'
    | 'project-report'
    | 'other';
  /**
   * Whether this document is mandatory for clearance
   */
  isRequired: boolean;
  status: 'active' | 'inactive' | 'under-review';
  fileTypes: ('pdf' | 'docx' | 'jpg' | 'png' | 'jpeg')[];
  /**
   * Maximum file size in MB
   */
  maxFileSize: number;
  /**
   * Order in which this requirement should appear
   */
  order: number;
  /**
   * Detailed instructions for students on how to obtain this document
   */
  instructions?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Sample document to show students what is expected
   */
  sampleDocument?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  caption?: string | null;
  uploadedBy?: (string | null) | User;
  fileType?: ('image' | 'document' | 'other') | null;
  /**
   * Whether this file can be accessed without authentication
   */
  isPublic?: boolean | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images".
 */
export interface Image {
  id: string;
  alt: string;
  fileType?: ('image' | 'document' | 'other') | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents".
 */
export interface Document {
  id: string;
  /**
   * Original filename of the uploaded document
   */
  fileName: string;
  /**
   * Student who uploaded the document
   */
  student: string | User;
  department: string | Department;
  requirement: string | Requirement;
  /**
   * The uploaded document file
   */
  file: string | Media;
  status: 'pending' | 'under-review' | 'approved' | 'rejected' | 'processing';
  uploadedAt: string;
  reviewedAt?: string | null;
  /**
   * Officer who reviewed the document
   */
  reviewedBy?: (string | null) | User;
  /**
   * Notes from the reviewing officer
   */
  reviewNotes?: string | null;
  rejectionReason?: ('not-clear' | 'wrong-type' | 'expired' | 'incomplete' | 'other') | null;
  /**
   * Custom rejection reason
   */
  customRejectionReason?: string | null;
  /**
   * File size in bytes
   */
  fileSize?: number | null;
  /**
   * File MIME type
   */
  fileType?: string | null;
  /**
   * Document version (increments on re-upload)
   */
  version: number;
  /**
   * Whether this is the latest version of the document
   */
  isLatest: boolean;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clearance-records".
 */
export interface ClearanceRecord {
  id: string;
  student: string | User;
  department: string | Department;
  recordType:
    | 'document-upload'
    | 'document-review'
    | 'document-approval'
    | 'document-rejection'
    | 'department-clearance'
    | 'final-clearance'
    | 'system-action';
  status: 'success' | 'pending' | 'failed' | 'cancelled';
  actionBy?: (string | null) | User;
  document?: (string | null) | Document;
  requirement?: (string | null) | Requirement;
  /**
   * Human-readable description of the action taken
   */
  description?: string | null;
  /**
   * Additional data about the action (for system use)
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  ipAddress?: string | null;
  userAgent?: string | null;
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'departments';
        value: string | Department;
      } | null)
    | ({
        relationTo: 'requirements';
        value: string | Requirement;
      } | null)
    | ({
        relationTo: 'documents';
        value: string | Document;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'images';
        value: string | Image;
      } | null)
    | ({
        relationTo: 'clearance-records';
        value: string | ClearanceRecord;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  lastName?: T;
  firstName?: T;
  middleName?: T;
  role?: T;
  department?: T;
  matricNo?: T;
  phone?: T;
  status?: T;
  profileImage?: T;
  lastLogin?: T;
  clearanceStatus?: T;
  hasSetPassword?: T;
  passwordSetAt?: T;
  createdBy?: T;
  createdByDepartment?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "departments_select".
 */
export interface DepartmentsSelect<T extends boolean = true> {
  name?: T;
  code?: T;
  description?: T;
  officer?: T;
  studentAffairsOfficer?: T;
  status?: T;
  clearanceOrder?: T;
  requiredDocuments?: T;
  studentCount?: T;
  completedClearances?: T;
  pendingClearances?: T;
  canAddOfficers?: T;
  officerCreationLimit?: T;
  createdOfficers?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "requirements_select".
 */
export interface RequirementsSelect<T extends boolean = true> {
  name?: T;
  code?: T;
  description?: T;
  departments?: T;
  documentType?: T;
  isRequired?: T;
  status?: T;
  fileTypes?: T;
  maxFileSize?: T;
  order?: T;
  instructions?: T;
  sampleDocument?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents_select".
 */
export interface DocumentsSelect<T extends boolean = true> {
  fileName?: T;
  student?: T;
  department?: T;
  requirement?: T;
  file?: T;
  status?: T;
  uploadedAt?: T;
  reviewedAt?: T;
  reviewedBy?: T;
  reviewNotes?: T;
  rejectionReason?: T;
  customRejectionReason?: T;
  fileSize?: T;
  fileType?: T;
  version?: T;
  isLatest?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  uploadedBy?: T;
  fileType?: T;
  isPublic?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images_select".
 */
export interface ImagesSelect<T extends boolean = true> {
  alt?: T;
  fileType?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clearance-records_select".
 */
export interface ClearanceRecordsSelect<T extends boolean = true> {
  student?: T;
  department?: T;
  recordType?: T;
  status?: T;
  actionBy?: T;
  document?: T;
  requirement?: T;
  description?: T;
  metadata?: T;
  ipAddress?: T;
  userAgent?: T;
  createdAt?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}